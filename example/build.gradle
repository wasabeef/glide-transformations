apply plugin: 'com.android.application'

android {
  compileSdkVersion COMPILE_SDK_VERSION as int
  buildToolsVersion BUILD_TOOLS_VERSION

  defaultConfig {
    minSdkVersion MIN_SDK_VERSION as int
    targetSdkVersion TARGET_SDK_VERSION as int
    versionCode "git rev-list origin/master --count".execute().text.toInteger()
    versionName VERSION_NAME

    renderscriptTargetApi TARGET_SDK_VERSION as int
    renderscriptSupportModeEnabled true
  }

  signingConfigs {
    release {
      storeFile file(keyStoreProperty)
      keyAlias keyAliasProperty
      storePassword keyStorePasswordProperty
      keyPassword keyAliasPasswordProperty
    }
  }

  buildTypes {
    debug {
      debuggable true
      zipAlignEnabled true
    }
    release {
      debuggable false
      zipAlignEnabled true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      shrinkResources true
      signingConfig signingConfigs.release
    }
  }
}

def getKeyStoreProperty() {
  return hasProperty('WASABEEF_KEYSTORE') ? WASABEEF_KEYSTORE : "debug.keystore"
}

def getKeyAliasProperty() {
  return hasProperty('WASABEEF_KEYALIAS') ? WASABEEF_KEYALIAS : "android"
}

def getKeyStorePasswordProperty() {
  return hasProperty('WASABEEF_KEYSTOREPASSWORD') ? WASABEEF_KEYSTOREPASSWORD : "androiddebugkey"
}

def getKeyAliasPasswordProperty() {
  return hasProperty('WASABEEF_KEYALIASPASSWORD') ? WASABEEF_KEYALIASPASSWORD : "android"
}

dependencies {
  implementation project(':transformations')
  implementation "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
  annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
  implementation "jp.co.cyberagent.android.gpuimage:gpuimage-library:${GPUIMAGE_VERSION}"
  implementation "com.android.support:appcompat-v7:${SUPPORT_PACKAGE_VERSION}"
  implementation "com.android.support:recyclerview-v7:${SUPPORT_PACKAGE_VERSION}"
  implementation 'com.android.support.constraint:constraint-layout:1.1.0-beta4'
}
